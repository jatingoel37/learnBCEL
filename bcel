package bcel.test;

import org.apache.bcel.generic.*;
import org.apache.bcel.classfile.*;
import org.apache.bcel.*;
import java.io.*;

public class MultiplierCreator {
  private InstructionFactory _factory;
  private ConstantPoolGen    _cp;
  private ClassGen           _cg;

  public MultiplierCreator() {
    _cg = new ClassGen("bcel.test.Multiplier", "java.lang.Object", "Multiplier.java", Const.ACC_PUBLIC | Const.ACC_SUPER, new String[] {  });
    _cg.setMajor(49);
    _cg.setMinor(0);

    _cp = _cg.getConstantPool();
    _factory = new InstructionFactory(_cg, _cp);
  }

  public void create(OutputStream out) throws IOException {
    createFields();
    createMethod_0();
    createMethod_1();
    createMethod_2();
    _cg.getJavaClass().dump(out);
  }

  private void createFields() {
    FieldGen field;

    field = new FieldGen(Const.ACC_PRIVATE, Type.INT, "multiplyer", _cp);
    _cg.addField(field.getField());
  }

  private void createMethod_0() {
    InstructionList il = new InstructionList();
    MethodGen method = new MethodGen(Const.ACC_PUBLIC, Type.VOID, new Type[] { Type.INT }, new String[] { "arg0" }, "<init>", "bcel.test.Multiplier", il, _cp);

    InstructionHandle ih_0 = il.append(_factory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createInvoke("java.lang.Object", "<init>", Type.VOID, Type.NO_ARGS, Const.INVOKESPECIAL));
    InstructionHandle ih_4 = il.append(_factory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createLoad(Type.INT, 1));
    il.append(_factory.createFieldAccess("bcel.test.Multiplier", "multiplyer", Type.INT, Const.PUTFIELD));
    InstructionHandle ih_9 = il.append(_factory.createReturn(Type.VOID));
    method.setMaxStack();
    method.setMaxLocals();
    _cg.addMethod(method.getMethod());
    il.dispose();
  }

  private void createMethod_1() {
    InstructionList il = new InstructionList();
    MethodGen method = new MethodGen(Const.ACC_PUBLIC, Type.INT, new Type[] { Type.INT }, new String[] { "arg0" }, "doIt", "bcel.test.Multiplier", il, _cp);

    InstructionHandle ih_0 = il.append(_factory.createLoad(Type.INT, 1));
    il.append(_factory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("bcel.test.Multiplier", "multiplyer", Type.INT, Const.GETFIELD));
    il.append(InstructionConst.IMUL);
    il.append(_factory.createReturn(Type.INT));
    method.setMaxStack();
    method.setMaxLocals();
    _cg.addMethod(method.getMethod());
    il.dispose();
  }

  private void createMethod_2() {
    InstructionList il = new InstructionList();
    MethodGen method = new MethodGen(Const.ACC_PUBLIC, Type.VOID, Type.NO_ARGS, new String[] {  }, "displ", "bcel.test.Multiplier", il, _cp);

    InstructionHandle ih_0 = il.append(_factory.createFieldAccess("java.lang.System", "out", new ObjectType("java.io.PrintStream"), Const.GETSTATIC));
    il.append(_factory.createNew("java.lang.StringBuilder"));
    il.append(InstructionConst.DUP);
    il.append(new PUSH(_cp, "Hi "));
    il.append(_factory.createInvoke("java.lang.StringBuilder", "<init>", Type.VOID, new Type[] { Type.STRING }, Const.INVOKESPECIAL));
    il.append(_factory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("bcel.test.Multiplier", "multiplyer", Type.INT, Const.GETFIELD));
    il.append(_factory.createInvoke("java.lang.StringBuilder", "append", new ObjectType("java.lang.StringBuilder"), new Type[] { Type.INT }, Const.INVOKEVIRTUAL));
    il.append(new PUSH(_cp, " number"));
    il.append(_factory.createInvoke("java.lang.StringBuilder", "append", new ObjectType("java.lang.StringBuilder"), new Type[] { Type.STRING }, Const.INVOKEVIRTUAL));
    il.append(_factory.createInvoke("java.lang.StringBuilder", "toString", Type.STRING, Type.NO_ARGS, Const.INVOKEVIRTUAL));
    il.append(_factory.createInvoke("java.io.PrintStream", "println", Type.VOID, new Type[] { Type.STRING }, Const.INVOKEVIRTUAL));
    InstructionHandle ih_30 = il.append(_factory.createReturn(Type.VOID));
    method.setMaxStack();
    method.setMaxLocals();
    _cg.addMethod(method.getMethod());
    il.dispose();
  }

  public static void main(String[] args) throws Exception {
    bcel.test.MultiplierCreator creator = new bcel.test.MultiplierCreator();
    creator.create(new FileOutputStream("bcel.test.Multiplier.class"));
  }
}
